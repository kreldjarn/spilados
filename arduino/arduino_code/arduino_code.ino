#include <SPI.h>

/***********************************
* Arduino code for 'Spilados'
*  written by
* Halldor Eldjarn (hae28@hi.is)
*  &
* Kristjan Eldjarn (keh4@hi.is)
************************************/

#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#include <Wire.h>
#include "SoftwareSerial.h"
#include "Adafruit_Trellis.h"

#define halldor_width 120
#define halldor_height 171

# This is the startup-image (the same as here: http://hi.is/~hae28)

static PROGMEM prog_uchar halldor_bmp[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0xa8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x54,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xaa,0xaa,0xa8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x54,0x55,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0xab,0xaa,0xbf,0xaa,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x55,0x51,0x15,0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6a,0xaa,0xa2,0xae,0xea,0x2a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x54,0x54,0x00,0x05,0x40,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xbb,0xfa,0x8a,0xaa,0xaa,0xaf,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x55,0x54,0x00,0x41,0x10,0x55,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xea,0xaa,0x22,0xaa,0xaa,0xaf,0xe8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0xd5,0x44,0x00,0x55,0x45,0x55,0xd4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xbf,0xaa,0xaa,0xbe,0xaa,0xbf,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x55,0x40,0x01,0x55,0x41,0x15,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0xee,0xaa,0xaa,0xae,0xea,0xaf,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x1d,0x44,0x54,0x55,0x55,0x44,0x55,0x5d,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xa8,0xaa,0xaa,0xbb,0xaa,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x40,0x04,0x05,0x55,0x51,0x75,0x7d,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x2e,0xa2,0x2a,0x2a,0xfb,0xaa,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x54,0x00,0x04,0x55,0x54,0x5d,0xdd,0xd0,0x00,0x00,0x00,0x00,0x00,0x00,0xef,0xea,0xaa,0xaa,0xfb,0xaa,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x50,0x01,0x15,0x51,0x05,0x57,0x77,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0xef,0xea,0x22,0xaa,0xe2,0xaa,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x01,0x55,0x40,0x00,0x45,0x45,0x05,0x5d,0xdd,0xdc,0x00,0x00,0x00,0x00,0x00,0x03,0xaa,0xba,0x8a,0xab,0xeb,0xab,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x01,0x50,0x14,0x05,0x15,0x55,0x55,0x57,0xff,0x7c,0x00,0x00,0x00,0x00,0x00,0x02,0xa8,0x2a,0x2a,0xaf,0xeb,0xef,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x04,0x45,0x55,0x55,0xd5,0xdd,0xdd,0x00,0x00,0x00,0x00,0x00,0x02,0xa8,0x88,0xaa,0xaf,0xff,0xff,0xff,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x55,0x57,0x55,0x77,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x02,0x20,0x00,0x02,0xae,0xef,0xff,0xff,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x45,0x5d,0xdd,0xdd,0xdd,0xdd,0x80,0x00,0x00,0x00,0x00,0x02,0x88,0x00,0x0a,0xaa,0xff,0xff,0xff,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x14,0x57,0x57,0x7d,0x7f,0x7f,0x00,0x00,0x00,0x00,0x00,0x02,0x20,0x00,0x02,0x2a,0xff,0xff,0xff,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x04,0x5d,0xdd,0xdd,0xdd,0xdd,0xc0,0x00,0x00,0x00,0x00,0x0a,0x88,0x80,0x88,0xaa,0xbf,0xff,0xff,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x17,0xf7,0xff,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x0a,0xa0,0x00,0x02,0x2a,0xaf,0xff,0xff,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x45,0x5d,0xdd,0xdd,0xdd,0x80,0x00,0x00,0x00,0x00,0x0a,0xa8,0x08,0x00,0x08,0xaa,0xbf,0xff,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x55,0x77,0x7f,0x7f,0x00,0x00,0x00,0x00,0x00,0x0a,0x20,0x00,0x00,0x20,0x2a,0xaa,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x55,0x5d,0xdd,0xdc,0x00,0x00,0x00,0x00,0x00,0x0a,0xa8,0x80,0x80,0x88,0xaa,0xab,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x55,0x57,0xff,0xf4,0x00,0x00,0x00,0x00,0x00,0x0a,0xa0,0x00,0x00,0x02,0x2a,0xaa,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x04,0x55,0x5d,0xdd,0xdc,0x00,0x00,0x00,0x00,0x00,0x0a,0xa8,0x00,0x08,0x0a,0xaa,0xbb,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x55,0x55,0x7d,0x74,0x00,0x00,0x00,0x00,0x00,0x0a,0xa0,0x00,0x2f,0xea,0xaa,0xee,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x04,0x40,0x00,0x5d,0xdd,0x55,0x55,0xd5,0xdd,0xdc,0x00,0x00,0x00,0x00,0x00,0x2b,0xa8,0x8b,0xff,0xff,0xfb,0xff,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x05,0x57,0xff,0xd1,0x57,0x7f,0xf7,0x54,0x00,0x00,0x00,0x00,0x00,0x0b,0xa2,0x2f,0xff,0xff,0xfb,0xff,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x55,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdc,0x00,0x00,0x00,0x00,0x00,0x0a,0xa8,0xbf,0xff,0xff,0xfb,0xff,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x7f,0xff,0xf5,0x7f,0xff,0xff,0xf4,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3f,0xff,0xff,0xfa,0xff,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x55,0xdd,0xfd,0xd0,0x5d,0xfd,0xfd,0xdc,0x00,0x00,0x00,0x00,0x00,0xb8,0x80,0xbf,0xff,0xff,0xf8,0xff,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x15,0x57,0xff,0xf0,0x57,0xff,0xff,0xf4,0x00,0x00,0x00,0x00,0x00,0xe8,0x00,0x3e,0xff,0xff,0xe2,0xef,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x15,0x55,0xdd,0xd0,0x5d,0xdd,0xdd,0xdc,0x00,0x00,0x00,0x00,0x00,0xa0,0x88,0x3f,0xff,0xff,0xe8,0xff,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x15,0x55,0x75,0x50,0x7f,0xff,0xff,0xf4,0x00,0x00,0x00,0x00,0x00,0x22,0x00,0x0e,0xff,0xff,0xe8,0xff,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x05,0x5d,0xdd,0xc0,0x5d,0xfd,0xfd,0xdc,0x00,0x00,0x00,0x00,0x00,0xaa,0x88,0x8f,0xff,0xff,0xa8,0xbf,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x55,0x55,0x00,0x57,0xff,0xff,0xd4,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x02,0xff,0xfe,0x20,0x3f,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x5d,0xd4,0x00,0x1d,0xdd,0xdd,0xd0,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x88,0xbf,0xfa,0x80,0xbf,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x40,0x00,0x17,0xff,0xff,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x22,0x2a,0xaa,0x00,0xaf,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x5d,0xdd,0xdd,0xd0,0x00,0x00,0x00,0x00,0x00,0x08,0x88,0xaa,0xaa,0xaa,0xaa,0xff,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x15,0x57,0x77,0xf7,0x50,0x00,0x00,0x00,0x00,0x00,0x20,0x22,0x22,0x22,0xaa,0xaf,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x5d,0xdd,0xdd,0xdd,0xd0,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x8a,0x8a,0xab,0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x55,0x7f,0x75,0x77,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x22,0x22,0x20,0xaf,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x5d,0xdd,0xdd,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0xa8,0xa8,0x88,0x8b,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x57,0xf7,0x77,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x22,0x22,0x00,0x0a,0xff,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x5d,0xdd,0xdd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x88,0x88,0x88,0x8a,0xbf,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x17,0x77,0x75,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x20,0x20,0x2a,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0xdd,0xdd,0xdc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0xa8,0x88,0xab,0xff,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x57,0xf7,0xf7,0xf4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x22,0x22,0xff,0xff,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x5d,0xdd,0xdd,0xdc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x88,0x8a,0x88,0xbf,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x77,0x77,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa2,0x2a,0x22,0xaa,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x44,0x44,0x55,0x5d,0xdd,0xd0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xaa,0xaa,0xaa,0xbf,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x15,0x55,0x77,0xf7,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2a,0xaa,0xaf,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,0x00,0x45,0x5d,0xdd,0xdd,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2a,0xaa,0xab,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x01,0x55,0x7f,0x7f,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2a,0xaa,0x2a,0xaf,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x40,0x00,0x05,0xdd,0xdd,0xd0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,0xaa,0xa8,0xab,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x50,0x00,0x15,0x57,0xf7,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xea,0xa2,0xaf,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x40,0x55,0xdd,0xdd,0xdc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0xbf,0xaa,0xbf,0xff,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x55,0x55,0x7f,0x7f,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xae,0xee,0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x55,0xdd,0xdd,0xdd,0xdd,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0xab,0xff,0xff,0xff,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x55,0x57,0x77,0xff,0xff,0xf4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2a,0xaa,0xff,0xff,0xff,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x05,0x5d,0xdd,0xdd,0xdd,0xdd,0xdd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xba,0xab,0xff,0xff,0xff,0xff,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x15,0x55,0x55,0x77,0x77,0x7f,0xff,0x40,0x00,0x00,0x00,0x00,0x00,0x2a,0xba,0xaa,0xff,0xff,0xff,0xff,0xff,0xff,0xfa,0x00,0x00,0x00,0x00,0x00,0x54,0x70,0x45,0x55,0xdd,0xdd,0xdd,0xfd,0xdd,0xdc,0x00,0x00,0x00,0x00,0x02,0xaa,0xea,0xab,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x00,0x05,0x45,0x60,0x15,0x55,0x55,0x55,0x77,0xff,0xff,0xff,0xf0,0x00,0x00,0x00,0x2a,0xaa,0xe2,0xaa,0xef,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0x00,0x00,0x00,0x54,0x45,0xc0,0x05,0x55,0x55,0x5d,0xdd,0xdd,0xdd,0xdd,0xdd,0x00,0x00,0x0b,0xba,0xab,0xea,0xab,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe8,0x00,0x05,0x55,0x11,0xc0,0x15,0x55,0x55,0x55,0x77,0x7f,0xff,0xff,0x7f,0x74,0x00,0x2a,0xaa,0xab,0xa2,0x2a,0xee,0xee,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0x00,0x55,0x44,0x45,0x00,0x45,0x55,0x55,0x55,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0x0b,0xbb,0xaa,0xaf,0x88,0xab,0xbb,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x05,0x55,0x50,0x57,0x00,0x01,0x55,0x55,0x55,0x55,0xff,0xff,0xf7,0xf7,0xf7,0x2e,0xaa,0xaa,0xae,0x02,0xaa,0xae,0xee,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x54,0x44,0x5c,0x00,0x04,0x55,0x55,0x55,0x55,0xdd,0xdd,0xdd,0xdd,0xdd,0xbb,0xba,0xaa,0xbe,0x88,0xaa,0xab,0xbb,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x11,0x5c,0x00,0x00,0x15,0x55,0x55,0x57,0x7f,0xff,0x7f,0x77,0x77,0xee,0xaa,0xaa,0xb8,0x00,0x2a,0xaa,0xae,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x54,0x45,0x5c,0x00,0x00,0x44,0x55,0x55,0x55,0xdd,0xdd,0xdd,0xdd,0xdd,0xbb,0xaa,0xbb,0xb8,0x88,0xaa,0xaa,0xab,0xfb,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x55,0x50,0x00,0x00,0x00,0x15,0x55,0x57,0xff,0xff,0xff,0xf7,0x77,0xee,0xaa,0xae,0xb8,0x00,0x22,0xa2,0xaa,0xae,0xff,0xff,0xff,0xff,0xff,0xff,0x54,0x55,0x55,0x50,0x00,0x00,0x00,0x05,0x55,0x5d,0xdd,0xdd,0xdd,0xdd,0xdd,0xba,0xbb,0xba,0xa8,0x88,0x8a,0x88,0xaa,0xaa,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x55,0x70,0x00,0x00,0x00,0x00,0x15,0x77,0x7f,0x7f,0x7f,0x77,0x75,0xea,0xaa,0xea,0xe8,0x20,0x22,0x20,0x22,0xaa,0xff,0xff,0xff,0xff,0xff,0xff,0x54,0x55,0x54,0x40,0x00,0x00,0x00,0x00,0x05,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xfa,0xbb,0xbb,0xe8,0x88,0x88,0x88,0x88,0xab,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x55,0x50,0x00,0x00,0x00,0x00,0x05,0x57,0xf7,0xf7,0xff,0x77,0x55,0xea,0xae,0xaa,0xe8,0x00,0x22,0x00,0x02,0x2e,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x55,0xc4,0x00,0x00,0x00,0x00,0x15,0x5d,0xdd,0xdd,0xdd,0xdd,0xdd,0xfa,0xbb,0xbb,0xaa,0x88,0x88,0x88,0x88,0xbb,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x55,0x10,0x00,0x00,0x00,0x00,0x55,0x55,0x77,0x7f,0x75,0x75,0x55,0xea,0xaa,0xeb,0xaa,0x20,0x00,0x20,0x20,0xaa,0xef,0xff,0xff,0xff,0xff,0xfe,0x55,0x55,0x55,0x44,0x00,0x00,0x00,0x00,0x55,0x55,0xdd,0xdd,0xdd,0xdd,0xd5,0xeb,0xbb,0xbb,0xaa,0x88,0x88,0x88,0x8a,0xab,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x57,0x10,0x00,0x00,0x00,0x01,0x55,0x55,0x55,0x57,0x77,0x55,0x55,0xea,0xae,0xae,0xaa,0x80,0x00,0x00,0x2a,0xaa,0xaf,0xff,0xff,0xff,0xff,0xee,0x55,0x55,0x54,0x04,0x00,0x00,0x00,0x04,0x45,0x55,0x55,0xdd,0x5d,0x55,0x55,0xba,0xbb,0xae,0xaa,0x88,0x88,0x88,0xaa,0xab,0xbb,0xbf,0xff,0xff,0xff,0xbf,0x55,0x55,0x54,0x11,0x00,0x00,0x01,0x15,0x15,0x55,0x55,0x55,0x5d,0x55,0x55,0xea,0xea,0xae,0xaa,0xa0,0x20,0x02,0xaa,0xaa,0xea,0xee,0xfe,0xfe,0xee,0xee,0x55,0x55,0x5c,0x44,0x40,0x00,0x04,0x44,0x45,0x55,0x55,0x55,0x55,0x55,0x55,0xeb,0xbb,0xba,0xaa,0xa8,0x88,0xaa,0xaa,0xab,0xab,0xbb,0xbb,0xfb,0xfb,0xbf,0x55,0x55,0x50,0x01,0x10,0x00,0x51,0x51,0x55,0x55,0x55,0x55,0x75,0x55,0x55,0xea,0xaa,0xba,0xaa,0xaa,0x02,0xaa,0xaa,0xaa,0xaa,0xaa,0xae,0xea,0xae,0xae};

// Define pinout for the OLED display
#define OLED_MOSI   9
#define OLED_CLK   10
#define OLED_DC    11
#define OLED_CS    13
#define OLED_RESET 12

#define LOGO16_GLCD_HEIGHT 16 
#define LOGO16_GLCD_WIDTH  16 

Adafruit_SSD1306 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);

#define DEBUG false

//
// Constants
//
const int NUM_POTS = 6;
const int POT_PINS[NUM_POTS] = {8, 9, 10, 11, 12, 13};
const int SIGNIFICANT = 3;

const String trackNames[4] = {"Bass Drum", "Snare Drum", "Hi Hat", "Funky"};

//
// Store updated and old states of the pots
//
int pot_values[NUM_POTS];
int old_pot_values[NUM_POTS];

//
// Adafruit Trellis is the button array we are using
//
Adafruit_Trellis matrix = Adafruit_Trellis();
Adafruit_TrellisSet trellis = Adafruit_TrellisSet(&matrix);

void setup()
{
  Serial.begin(115200);
  
  trellis.begin(0x70);
  
  pinMode(2, INPUT);
  digitalWrite(2, HIGH);
  
  for(int i = 0; i < NUM_POTS; ++i)
  {
    old_pot_values[i] = 0;
    pot_values[i] = 0;
  }
  
  // OLED setup
  display.begin(SSD1306_SWITCHCAPVCC);
  display.clearDisplay();
  display.drawBitmap(-20, -50, halldor_bmp, halldor_width, halldor_height, WHITE);
  display.setCursor(92, 20);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.print("Drom");
  display.setCursor(88, 30);
  display.print("Triks");
  display.setCursor(92, 40);
  display.print("3000");
  display.invertDisplay(true);
  display.display();
  delay(5000);
  display.clearDisplay();
  display.setCursor(10, 10);
  display.invertDisplay(false);
  display.display();
}

// Use: Returns true if the distance between values is significant
boolean value_change_significant(int value, int new_value)
{
  if (abs(value - new_value) >= SIGNIFICANT)
  {
    return true;
  }
  return false;
}

void send_value(int index, int value)
{
#if DEBUG
  Serial.print(index);
  Serial.print(", ");
  Serial.println(value);
#else
  Serial.write(index);
  Serial.write(value);
  
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(10, 10);
 
  display.print(index);
  display.print(" : ");
  display.print(value);
  
#endif 
}

void handle_message(int param, int value)
{
  if(param >= 100 && param < 116)
  {
    int ledNumber = param - 100;
    if(value > 128)
    {
      trellis.setLED(ledNumber);
    }
    else
    {
      trellis.clrLED(ledNumber);
    }
  }
}

void assemble_display()
{
  // Print the pot values like they appear on the serial bus
  for(int i = 0; i < 2; i++)
  {
    for(int j = 0; j < 3; j++)
    {
      int index = i * 3 + j % 3;
      display.setCursor(2 + j * 36, 2 + i * 10);
      display.print(index + 1);
      display.print(":");
      display.print(pot_values[index]/4);
    }
  }
  
  // Print the current active track
  display.setCursor(2, 42);
  display.print("Track: ");
  int index = floor((float)pot_values[5]/964.0 * 4);
  if(index >= 4) index = 4;
  if(index < 0) index = 0;
  display.print(trackNames[index]);
}

void loop()
{
  delay(30);
  
  // Handle pushing buttons and toggling
  // the LED on/off. 
  // TODO: Sync with internal state dumps of the
  // Sequencer over serial
  // Read the pots, send values over serial
  
  for(int i = 0; i < NUM_POTS; ++i)
  {
    int new_value = analogRead(POT_PINS[i]);
    
    if (value_change_significant(old_pot_values[i], new_value))
    {
      old_pot_values[i] = pot_values[i];
      pot_values[i] = new_value;
      send_value(i, new_value/4);
    }
  }
  
  while(Serial.available() > 0)
  {
    handle_message(Serial.read(), Serial.read());
  }
  
  if(trellis.readSwitches())
  {
    for(int i = 0; i < 16; i++)
    {
      if(trellis.justPressed(i))
      {
        if(trellis.isLED(i))
        {
          send_value(100 + i, 0);
          trellis.clrLED(i);
        }
        else
        {
          send_value(100 + i, 255);
          trellis.setLED(i);
        }
      }
    }
  }
  
  trellis.writeDisplay();
  display.clearDisplay();
  assemble_display();
  display.display();
}